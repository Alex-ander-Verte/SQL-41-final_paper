SET search_path TO bookings;
--Задание 1
-- В каких городах больше одного аэропорта?

select a2.city --выбрали в подзапросе список городов
	from airports a2 -- из таблицы с аэропортами
	group by 1 --сгруппировали по городам
	having  count(*) > 1 --при условии, что количество аэропортов на каждый город больше 1

--Задание 2
--В каких аэропортах есть рейсы, выполняемые самолетом с максимальной дальностью перелета? (Подзапрос)

select
	distinct on (a.airport_code) airport_code, --оставляем только уникальные коды аэропортов
	a.airport_name,
	t.aircraft_code --соотносим аэропорты и самолёт из подзапроса
from airports a
join flights f on --обогащаем данные таблией с рейсами, чтобы соединить таблицы по самолётам и аэропортам
	a.airport_code = f.departure_airport
	or a.airport_code = f.arrival_airport
join ( --обогащаем данными из подзапроса, в котором находим самолёт с максимальной дальностью перелёта
	select 	aircraft_code , "range"
	from aircrafts
	order by "range" desc --сортируем по дальности перелёта в порядке убывания
	limit 1 --ограничиваемся только 1 максимальным значением
	) t on 	f.aircraft_code = t.aircraft_code;

--Задание 3
--Вывести 10 рейсов с максимальным временем задержки вылета (Оператор LIMIT)

select actual_departure-scheduled_departure as departure_delay, * --выводим время задержки вылета и все данные по рейсам
from flights f 
where actual_departure-scheduled_departure is not null --при условии, что время задержки вылета имеет значение, т.е не пусто
order by actual_departure-scheduled_departure desc  --сортируем по убыванию согласно времени задержки вылета
limit 10; --ограничеваемся 10 записями

--Задание 4
--Были ли брони, по которым не были получены посадочные талоны? (Верный тип JOIN)

select distinct t.book_ref --выводим уникальные номера бронирований, т.к на 1 бронирование может быть несколько билетов
from tickets t 
left join boarding_passes bp using (ticket_no) --обогащаем данными из таблицы с посадочными талонами, беря все значения из неё
where bp.boarding_no is null; --берём только те значения, по которым отсутствуют посадочные талоны

--Задание 5
--Найдите количество свободных мест для каждого рейса, их % отношение к общему количеству мест в самолете.
--Добавьте столбец с накопительным итогом - суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день. 
--Т.е. в этом столбце должна отражаться накопительная сумма - сколько человек уже вылетело из данного аэропорта на этом или более ранних рейсах в течении дня.
--(Оконная функция, Подзапросы или/и cte)

select
	*,
	all_seats-count_seat_flight as count_seat_free, --количество свободных мест для каждого рейса
	(all_seats-count_seat_flight)* 100 / all_seats || ' %' as percent_free_seats, --процентное отношение свободных мест к общему количеству мест в самолёте
	sum(count_seat_flight) over (partition by t.aircraft_code order by t.scheduled_departure::date) cumulative_total --накопительный итог по количеству вывезенных пассажиров из каждого аэропорта на каждый день
from
	(
	select
		distinct on (f.flight_no) f.flight_no, --уникальные номера рейсов
		f.aircraft_code, --код самолёта
		f.scheduled_departure::date, --берём дату вылета без учёта времени
		count(bp.seat_no) over (partition by f.flight_id) count_seat_flight --количество занятых мест для каждого рейса
	from
		flights f
	left join boarding_passes bp on
		f.flight_id = bp.flight_id --соединяем с таблицей по посадочным талонам
	where
		bp.seat_no is not null
) t -- в подзапросе выводим количество занятых мест для каждого рейса
join (
	select
		aircraft_code, --код самолёта
		count(aircraft_code) all_seats --общее количество мест в самолёте
	from
		seats s
	group by
		aircraft_code
) t1 on
	t.aircraft_code = t1.aircraft_code --обогащаем данными из таблицы с общим количеством мест в самолёте
	group by t.flight_no, t.aircraft_code, t.scheduled_departure::date, t.count_seat_flight, t1.aircraft_code, t1.all_seats --группируем для вывода данных

--Задание 6
--Найдите процентное соотношение перелетов по типам самолетов от общего количества. (Подзапрос или окно, Оператор ROUND)

select distinct aircraft_code, --код самолёта
	(count(flight_id) over (partition by aircraft_code)) count_flight_aircraft, --количество перелётов по типам самолета
	round(((count(flight_id) over (partition by aircraft_code))::numeric*100/(select count(flight_id)::numeric from flights f)), 2) || ' %' 
		as percent_f_a --процентное соотношение количества перелётов по типам самолётов к общему количеству перелётов
from flights 
group by aircraft_code,  flight_id;  --группируем по коду самолёта и идентификатору перелёта

--Задание 7
--Были ли города, в которые можно  добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета? (CTE)

--Задание 8
--Между какими городами нет прямых рейсов? (Декартово произведение в предложении FROM, Самостоятельно созданные представления
--(если облачное подключение, то без представления), Оператор EXCEPT)

--Задание 9
--Вычислите расстояние между аэропортами, связанными прямыми рейсами, сравните с допустимой максимальной дальностью перелетов  в самолетах, обслуживающих эти рейсы *
--(Оператор RADIANS или использование sind/cosd, CASE)

