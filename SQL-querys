SET search_path TO bookings;
--Задание 1
-- В каких городах больше одного аэропорта?

select a2.city --выбрали в подзапросе список городов
	from airports a2 -- из таблицы с аэропортами
	group by 1 --сгруппировали по городам
	having  count(*) > 1 --при условии, что количество аэропортов на каждый город больше 1

--Задание 2
--В каких аэропортах есть рейсы, выполняемые самолетом с максимальной дальностью перелета? (Подзапрос)

select
	distinct on (a.airport_code) airport_code, --оставляем только уникальные коды аэропортов
	a.airport_name,
	t.aircraft_code --соотносим аэропорты и самолёт из подзапроса
from airports a
join flights f on --обогащаем данные таблией с рейсами, чтобы соединить таблицы по самолётам и аэропортам
	a.airport_code = f.departure_airport
	or a.airport_code = f.arrival_airport
join ( --обогащаем данными из подзапроса, в котором находим самолёт с максимальной дальностью перелёта
	select 	aircraft_code , "range"
	from aircrafts
	order by "range" desc --сортируем по дальности перелёта в порядке убывания
	limit 1 --ограничиваемся только 1 максимальным значением
	) t on 	f.aircraft_code = t.aircraft_code;

--Задание 3
--Вывести 10 рейсов с максимальным временем задержки вылета (Оператор LIMIT)

select actual_departure-scheduled_departure as departure_delay, * --выводим время задержки вылета и все данные по рейсам
from flights f 
where actual_departure-scheduled_departure is not null --при условии, что время задержки вылета имеет значение, т.е не пусто
order by actual_departure-scheduled_departure desc  --сортируем по убыванию согласно времени задержки вылета
limit 10; --ограничеваемся 10 записями

--Задание 4
--Были ли брони, по которым не были получены посадочные талоны? (Верный тип JOIN)

select distinct t.book_ref --выводим уникальные номера бронирований, т.к на 1 бронирование может быть несколько билетов
from tickets t 
left join boarding_passes bp using (ticket_no) --обогащаем данными из таблицы с посадочными талонами, беря все значения из неё
where bp.boarding_no is null; --берём только те значения, по которым отсутствуют посадочные талоны

--Задание 5
--Найдите количество свободных мест для каждого рейса, их % отношение к общему количеству мест в самолете.
--Добавьте столбец с накопительным итогом - суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день. 
--Т.е. в этом столбце должна отражаться накопительная сумма - сколько человек уже вылетело из данного аэропорта на этом или более ранних рейсах в течении дня.
--(Оконная функция, Подзапросы или/и cte)

select
	t.flight_id, t.flight_no,t.departure_airport, t.status, t.aircraft_code, t.actual_departure::date, t.count_seat_flight, t1.all_seats,
	all_seats-count_seat_flight as count_seat_free, --количество свободных мест для каждого рейса
	(all_seats-count_seat_flight)* 100 / all_seats || ' %' as percent_free_seats, --процентное отношение свободных мест к общему количеству мест в самолёте
	sum(count_seat_flight) over (partition by t.departure_airport, t.actual_departure::date order by t.actual_departure) cumulative_total --накопительный итог 
	--по количеству вывезенных пассажиров из каждого аэропорта на каждый день
from
	(
	select
		f.flight_id, --идентификаторы рейсов
		f.flight_no, -- номера рейсов
		f.departure_airport, --аэропорт вылета
		f.status, --статус рейса
		f.aircraft_code, --код самолёта
		f.actual_departure, --берём фактическую дату вылета без учёта времени
		count(bp.seat_no) over (partition by f.flight_id) count_seat_flight --количество занятых мест для каждого рейса
	from
		flights f
	left join boarding_passes bp on
		f.flight_id = bp.flight_id --соединяем с таблицей по посадочным талонам
	where
		(bp.seat_no is not null) --занятые места
		and 
		(f.status = 'Arrived' or f.status = 'Departed') --статус рейса "прибывший" или "вылетевший"
) t -- в подзапросе выводим количество занятых мест для каждого вылетевшего самолёта
join (
	select
		aircraft_code, --код самолёта
		count(aircraft_code) all_seats --общее количество мест в самолёте
	from
		seats s
	group by
		aircraft_code
) t1 on
	t.aircraft_code = t1.aircraft_code --обогащаем данными из таблицы с общим количеством мест в самолёте
	group by t.flight_id, t.flight_no,t.departure_airport, t.status, t.aircraft_code, t.actual_departure, t.count_seat_flight, t1.all_seats --группируем для вывода данных
--Задание 6
--Найдите процентное соотношение перелетов по типам самолетов от общего количества. (Подзапрос или окно, Оператор ROUND)

select distinct aircraft_code, --код самолёта
	(count(flight_id) over (partition by aircraft_code)) count_flight_aircraft, --количество перелётов по типам самолета
	round(((count(flight_id) over (partition by aircraft_code))::numeric*100/(select count(flight_id)::numeric from flights f)), 2) || ' %' 
		as percent_f_a --процентное соотношение количества перелётов по типам самолётов к общему количеству перелётов
from flights 
group by aircraft_code,  flight_id;  --группируем по коду самолёта и идентификатору перелёта

--Задание 7
--Были ли города, в которые можно  добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета? (CTE)

with cte1 as (
	select flight_id, min(amount) filter (where fare_conditions = 'Business') min_amount_business, --минимальная стоимость билета бизнесс-класса
		max(amount) filter (where fare_conditions = 'Economy') max_amount_economy --максимальная стоимость билета эконом-класса
	from ticket_flights tf 
	group by flight_id --группируем по идентификатору перелёта
)
select flight_id, --выводим идентификатор перелёта
	case 
		--сравниваем минимальную стоимость билета бизнесс-класса и максимальную стоимость билета эконом-класса 
		--и выводим соответствующую надпись
		when min_amount_business < max_amount_economy then 'Да, бизнес-класс дешевле' 
		else 'Нет, бизнесс-класс дороже'
	end case_bis_or_eco
from cte1
where min_amount_business < max_amount_economy --выводим только те записи, где бизнесс-класс дешевле эконома

--Задание 8
--Между какими городами нет прямых рейсов? (Декартово произведение в предложении FROM, Самостоятельно созданные представления
--(если облачное подключение, то без представления), Оператор EXCEPT)

--создаём представление с городами по существующим рейсам
create view city_flights as
	select distinct on (dep.flight_no) dep.flight_no, dep.departure_city, arr.arrival_city -- выводим для каждого номера рейса город отправления и прибытия
	from (select f.flight_no, f.departure_airport, a.city departure_city
		from flights f 
		join airports a on f.departure_airport = a.airport_code
		) dep --в подзапросе выводим номера рейсов и города отправления
	join (select f.flight_no, f.arrival_airport, a.city arrival_city
		from flights f 
		join airports a on f.arrival_airport = a.airport_code
		) arr --в подзапросе выводим номера рейсов и города прибытия
		on dep.flight_no = arr.flight_no


select a.city as city1, a2.city as city2 --выводим пары городов, по которыми нет рейсов
from airports a
cross join airports a2 --декартово произведение для городов, все возможные сочетания пар городов
except --вычитаем строки с парами городов, по которым етсь рейсы
select departure_city as city1, arrival_city as city2
from city_flights

--Задание 9
--Вычислите расстояние между аэропортами, связанными прямыми рейсами, сравните с допустимой максимальной дальностью перелетов  в самолетах, обслуживающих эти рейсы *
--(Оператор RADIANS или использование sind/cosd, CASE)

select
	distinct on (dep.flight_no) dep.flight_no,
	dep.aircraft_code, 	dep."range",
	dep.departure_airport, 	dep.departure_city, dep.departure_longitude, dep.departure_latitude,
	arr.arrival_airport, arr.arrival_city, arr.arrival_longitude, arr.arrival_latitude,
	-- выводим для каждого номера рейса аэропорт, город отправления и прибытия, и их координаты + код самолёта и макс дальность полёта
	acos(sin(radians(dep.departure_latitude))* sin(radians(arr.arrival_latitude))+ cos(radians(dep.departure_latitude))*
	cos(radians(arr.arrival_latitude))* cos(radians(dep.departure_longitude)-radians(arr.arrival_longitude)))* 6371 as distance,
	--выводим расстояние между аэропортами
	case 
		when dep."range" > acos(sin(radians(dep.departure_latitude))* sin(radians(arr.arrival_latitude))+ cos(radians(dep.departure_latitude))*
		cos(radians(arr.arrival_latitude))* cos(radians(dep.departure_longitude)-radians(arr.arrival_longitude)))* 6371 
		then round((dep."range" - acos(sin(radians(dep.departure_latitude))* sin(radians(arr.arrival_latitude))+ cos(radians(dep.departure_latitude))*
		cos(radians(arr.arrival_latitude))* cos(radians(dep.departure_longitude)-radians(arr.arrival_longitude)))* 6371)::numeric, 2) || ' km. ' || ' Всё хорошо, самолёт соответствует требованиям'
		else round((dep."range" - acos(sin(radians(dep.departure_latitude))* sin(radians(arr.arrival_latitude))+ cos(radians(dep.departure_latitude))*
		cos(radians(arr.arrival_latitude))* cos(radians(dep.departure_longitude)-radians(arr.arrival_longitude)))* 6371)::numeric, 2) || ' km. ' || ' Внимание! Самолёт не соответствует требованиям'
	end range_distance_contrast 
	--сравниваем макс дальность полёта самолёта, назначенного на рейс, с расстоянием между пунктами перелёта.
	--и выводим разницу двух величин с комментарием, соответствует ли самолёт требованиям  по дальности полёта
from (select
		f.flight_no,
		a2.aircraft_code,
		a2."range",
		f.departure_airport,
		a.city departure_city,
		a.longitude departure_longitude,
		a.latitude departure_latitude
	from flights f
	join airports a on f.departure_airport = a.airport_code
	join aircrafts a2 on f.aircraft_code = a2.aircraft_code 
	) dep --в подзапросе выводим номера рейсов, аэропорта и города отправления, и их координаты + код самолёта и макс дальность полёта
join (select
		f.flight_no,
		a2.aircraft_code,
		a2."range",
		f.arrival_airport,
		a.city arrival_city,
		a.longitude arrival_longitude,
		a.latitude arrival_latitude
	from flights f
	join airports a on f.arrival_airport = a.airport_code
	join aircrafts a2 on f.aircraft_code = a2.aircraft_code 
	) arr --в подзапросе выводим номера рейсов, аэропорта и города прибытия, и их координаты + код самолёта и макс дальность полёта
on dep.flight_no = arr.flight_no; --соединяем данные по отправлениям и по прибытиям (из подзапросов) по номеру рейса
